// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: auth.sql

package data

import (
	"context"
	"database/sql"
	"time"
)

const addSession = `-- name: AddSession :one
INSERT INTO sessions (
        user_id,
        email,
        expiry,
        token,
        refresh_token,
        activate_code,
        user_ip,
        type,
        post_suspend_expiry,
        is_expired
    )
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
RETURNING id, user_id, email, expiry, token, activate_code, refresh_token, user_ip, type, post_suspend_expiry, is_expired
`

type AddSessionParams struct {
	UserID            int64        `json:"user_id"`
	Email             string       `json:"email"`
	Expiry            time.Time    `json:"expiry"`
	Token             string       `json:"token"`
	RefreshToken      string       `json:"refresh_token"`
	ActivateCode      string       `json:"activate_code"`
	UserIp            string       `json:"user_ip"`
	Type              string       `json:"type"`
	PostSuspendExpiry sql.NullTime `json:"post_suspend_expiry"`
	IsExpired         sql.NullBool `json:"is_expired"`
}

func (q *Queries) AddSession(ctx context.Context, arg AddSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, addSession,
		arg.UserID,
		arg.Email,
		arg.Expiry,
		arg.Token,
		arg.RefreshToken,
		arg.ActivateCode,
		arg.UserIp,
		arg.Type,
		arg.PostSuspendExpiry,
		arg.IsExpired,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.Expiry,
		&i.Token,
		&i.ActivateCode,
		&i.RefreshToken,
		&i.UserIp,
		&i.Type,
		&i.PostSuspendExpiry,
		&i.IsExpired,
	)
	return i, err
}

const addUser = `-- name: AddUser :one
INSERT INTO users (
        uuid,
        name,
        email,
        folder_uuid,
        is_draft,
        created_at
    )
VALUES (?, ?, ?, ?, ?, CURRENT_TIMESTAMP)
RETURNING id, uuid, name, email, folder_uuid, is_draft, created_at
`

type AddUserParams struct {
	Uuid       string         `json:"uuid"`
	Name       string         `json:"name"`
	Email      sql.NullString `json:"email"`
	FolderUuid string         `json:"folder_uuid"`
	IsDraft    bool           `json:"is_draft"`
}

func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, addUser,
		arg.Uuid,
		arg.Name,
		arg.Email,
		arg.FolderUuid,
		arg.IsDraft,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Name,
		&i.Email,
		&i.FolderUuid,
		&i.IsDraft,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUserByID = `-- name: DeleteUserByID :exec
DELETE FROM users
WHERE id = ?
`

func (q *Queries) DeleteUserByID(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserByID, id)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, uuid, name, email, folder_uuid, is_draft, created_at
FROM users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Uuid,
			&i.Name,
			&i.Email,
			&i.FolderUuid,
			&i.IsDraft,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSessionByActivateCode = `-- name: GetSessionByActivateCode :one
SELECT id, user_id, email, expiry, token, activate_code, refresh_token, user_ip, type, post_suspend_expiry, is_expired
FROM sessions
WHERE activate_code = ?
`

func (q *Queries) GetSessionByActivateCode(ctx context.Context, activateCode string) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSessionByActivateCode, activateCode)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.Expiry,
		&i.Token,
		&i.ActivateCode,
		&i.RefreshToken,
		&i.UserIp,
		&i.Type,
		&i.PostSuspendExpiry,
		&i.IsExpired,
	)
	return i, err
}

const getSessionByToken = `-- name: GetSessionByToken :one
SELECT id, user_id, email, expiry, token, activate_code, refresh_token, user_ip, type, post_suspend_expiry, is_expired
FROM sessions
WHERE token = ?
`

func (q *Queries) GetSessionByToken(ctx context.Context, token string) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSessionByToken, token)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.Expiry,
		&i.Token,
		&i.ActivateCode,
		&i.RefreshToken,
		&i.UserIp,
		&i.Type,
		&i.PostSuspendExpiry,
		&i.IsExpired,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, uuid, name, email, folder_uuid, is_draft, created_at
from users
WHERE email = ?
`

func (q *Queries) GetUserByEmail(ctx context.Context, email sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Name,
		&i.Email,
		&i.FolderUuid,
		&i.IsDraft,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, uuid, name, email, folder_uuid, is_draft, created_at
from users
WHERE id = ?
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Name,
		&i.Email,
		&i.FolderUuid,
		&i.IsDraft,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByUUID = `-- name: GetUserByUUID :one
SELECT id, uuid, name, email, folder_uuid, is_draft, created_at
from users
WHERE uuid = ?
`

func (q *Queries) GetUserByUUID(ctx context.Context, uuid string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUUID, uuid)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Name,
		&i.Email,
		&i.FolderUuid,
		&i.IsDraft,
		&i.CreatedAt,
	)
	return i, err
}

const updateSessionIsExpired = `-- name: UpdateSessionIsExpired :exec
UPDATE sessions
SET is_expired = ?
WHERE token = ?
`

type UpdateSessionIsExpiredParams struct {
	IsExpired sql.NullBool `json:"is_expired"`
	Token     string       `json:"token"`
}

func (q *Queries) UpdateSessionIsExpired(ctx context.Context, arg UpdateSessionIsExpiredParams) error {
	_, err := q.db.ExecContext(ctx, updateSessionIsExpired, arg.IsExpired, arg.Token)
	return err
}

const updateSessionPostSuspendExpiry = `-- name: UpdateSessionPostSuspendExpiry :exec
UPDATE sessions
SET post_suspend_expiry = ?
WHERE token = ?
`

type UpdateSessionPostSuspendExpiryParams struct {
	PostSuspendExpiry sql.NullTime `json:"post_suspend_expiry"`
	Token             string       `json:"token"`
}

func (q *Queries) UpdateSessionPostSuspendExpiry(ctx context.Context, arg UpdateSessionPostSuspendExpiryParams) error {
	_, err := q.db.ExecContext(ctx, updateSessionPostSuspendExpiry, arg.PostSuspendExpiry, arg.Token)
	return err
}

const updateUserEmail = `-- name: UpdateUserEmail :one
UPDATE users
SET email = ?
WHERE id = ?
RETURNING id, uuid, name, email, folder_uuid, is_draft, created_at
`

type UpdateUserEmailParams struct {
	Email sql.NullString `json:"email"`
	ID    int64          `json:"id"`
}

func (q *Queries) UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserEmail, arg.Email, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Name,
		&i.Email,
		&i.FolderUuid,
		&i.IsDraft,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserIsDraft = `-- name: UpdateUserIsDraft :one
UPDATE users
SET is_draft = ?
WHERE id = ?
RETURNING id, uuid, name, email, folder_uuid, is_draft, created_at
`

type UpdateUserIsDraftParams struct {
	IsDraft bool  `json:"is_draft"`
	ID      int64 `json:"id"`
}

func (q *Queries) UpdateUserIsDraft(ctx context.Context, arg UpdateUserIsDraftParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserIsDraft, arg.IsDraft, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Name,
		&i.Email,
		&i.FolderUuid,
		&i.IsDraft,
		&i.CreatedAt,
	)
	return i, err
}
